// Oсобенность JavaScript-объектов в том, что можно получить доступ к любому свойству.
// Даже если свойства не существует – ошибки не будет!
// При обращении к свойству, которого нет, возвращается undefined.
// Это позволяет просто проверить существование свойства:

let user = {};
alert(user.noSuchProperty === undefined); // true означает "свойства нет"

// существует специальный оператор "in" для проверки существования свойства в объекте.
// "key" in object

let user = {
    name: "John",
    age: 30,
};

alert("age" in user); // true, user.age существует
alert("blabla" in user); // false, user.blabla не существует

// также вместо самого имени свойства в кавычках
// можно указать переменную с именем этого свойства

let user = {
    age: 30,
};

let key = "age";
alert(key in user);

// использование in и сравнение с undefine

let obj = {
    test: undefined,
};

alert(obj.test); //  выведет undefined, значит свойство не существует?
alert("test" in obj); // true, свойство существует!

// Для перебора всех свойств объекта используется цикл for..in
// for (key in object) {
//
// }

let user = {
    name: "John",
    age: 30,
    isAdmin: true,
};

for (let key in user) {  // можно использовать другое имя переменной, вариант for (let prop in obj)
    alert(key); // Выведет имена свойства name, age, isAdmin
    alert(user[key]) // Выведет содержимое свойства John, 30, true
}

// При переборе свойств в цикле свойства упорядочены особым образом:
// свойства с целочисленными ключами сортируются по возрастанию,
// остальные располагаются в порядке создания.

let phoneCodes = {
    "49": "Германия",
    "41": "Швейцария",
    "44": "Великобритания",
    "1": "США"
};

for (let props in phoneCodes) {
    alert(props); // 1, 41, 44, 49
}

// ... или можно сделать коды с не целочисленными свойствами.
// Добавления знака "+" перед каждым кодом будет достаточно.
// в фунциях и объектах использование внутренних переменных сидентичными
// именами как и у аргументов не только возможно но и приветствуется.

function makeUser(name, age) {
    return {
        name: name,
        age: age,
    };
}

let user = makeUser("john", 30);
alert(user.name);

// Вместо name:name мы можем написать просто name

function makeUser(name, age) {
    return {
        name, // то же самое, что и name: name
        age   // то же самое, что и age: age
        // ...
    };
}

// Мы можем использовать как обычные свойства, так и короткие в одном и том же объекте

let user = {
    name,
    age: 30,
};

// имя переменной не может совпадать с зарезервированными словами,
// такими как «for», «let», «return» и т.д.
// ! Но для свойств объекта такого ограничения нет!
// Нет никаких ограничений к именам свойств.
// Они могут быть в виде строк или символов.
let obj = {
    for: 1,
    let: 2,
    return: 3,
};

alert(obj.for + " " + obj.let + " " + obj.return);

// Все другие типы данных будут автоматически преобразованы к строке.
// Например, если использовать число 0 в качестве ключа,
// то оно превратится в строку "0":

let obj = {
    0: "Тест" // то же самое что и "0": "Тест"
};

// обе функции alert выведут одно и то же свойство (число 0 преобразуется в строку "0")
alert( obj["0"] ); // Тест
alert( obj[0] ); // Тест (то же свойство)

// свойство __proto__. Мы не можем установить его в необъектное значение:
let obj = {};
obj.__proto__ = 5; // присвоим число
alert(obj.__proto__); // [object Object], значение - это объект, т.е. не то, что мы ожидали
let str = "Hello";
let spc = " ";
let wrd = "World";
let srch = "ll";
console.log(str.concat(spc, wrd, spc).repeat(10));

// Конструктор
//
// String()
//      Создает новый объект String. Он выполняет преобразование типов,
//      когда вызывается как функция, а не как конструктор, что обычно более полезно.
//
// Статические методы
//
// String.fromCharCode (num1 [, ... [, numN]])
//      Возвращает строку, созданную с использованием указанной последовательности значений Unicode.
// String.fromCodePoint (число1 [, ... [, числоN)
//      Возвращает строку, созданную с использованием указанной последовательности кодовых точек.
// String.raw ()
//      Возвращает строку, созданную из необработанной строки шаблона.
//
// Свойства экземпляра
// String.prototype.length
//     Отражает длину строки. Только для чтения.
//
// Методы экземпляра
// String.prototype.at(индекс)
//      Возвращает символ (ровно одну кодовую единицу UTF-16) по указанному индексу.
//      Принимает отрицательные целые числа, которые отсчитываются от последнего строкового символа.
// String.prototype.charAt (индекс)
//      Возвращает символ (ровно одну кодовую единицу UTF-16) по указанному индексу.
// String.prototype.charCodeAt (индекс)
//      Возвращает число, которое является значением кодовой единицы UTF-16 по заданному индексу.
// String.prototype.codePointAt (pos)
//      Возвращает неотрицательное целое число Number, которое является значением
//      кодовой точки кодовой точки в кодировке UTF-16, начиная с указанной позиции.
// String.prototype.concat (str [, ... strN])
//      Объединяет текст из двух (или более) строк и возвращает новую строку.
// String.prototype.includes (searchString [, позиция])
//      Определяет, содержит ли вызывающая строка searchString.
// String.prototype.endsWith (searchString [, длина])
//      Определяет, заканчивается ли строка символами строки searchString.
// String.prototype.indexOf (searchValue [, fromIndex])
//      Возвращает индекс в вызывающем объекте String первого вхождения searchValue
//      или -1, если не найден.
// String.prototype.lastIndexOf (searchValue [, fromIndex])
//      Возвращает индекс в вызывающем объекте String последнего вхождения searchValue
//      или -1, если не найден.
// String.prototype.localeCompare (compareString [, locales [, параметры]])
//      Возвращает число, указывающее, находится ли ссылочная строка compareString до,
//      после или эквивалентна данной строке в порядке сортировки.
// String.prototype.match (регулярное выражение)
//      Используется для сопоставления регулярного выражения regexp со строкой.
// String.prototype.matchAll (регулярное выражение)
//      Возвращает итератор всех совпадений регулярного выражения.
// String.prototype.normalize ([форма])
//      Возвращает форму нормализации Unicode вызывающего строкового значения.
// String.prototype.padEnd (targetLength [, padString])
//      Дополняет текущую строку с конца заданной строкой и возвращает новую строку длины targetLength.
// String.prototype.padStart (targetLength [, padString])
//      Дополняет текущую строку с начала заданной строкой и возвращает новую строку длины targetLength.
// String.prototype.repeat (количество)
//      Возвращает строку, состоящую из элементов объекта, повторяющихся количество раз.
// String.prototype.replace (searchFor, replaceWith)
//      Используется для замены вхождений searchFor с помощью replaceWith.
//      searchFor может быть строкой или регулярным выражением,
//      а replaceWith может быть строкой или функцией.
// String.prototype.replaceAll (searchFor, replaceWith)
//      Используется для замены всех вхождений searchFor с помощью replaceWith.
//      searchFor может быть строкой или регулярным выражением,
//      а replaceWith может быть строкой или функцией.
// String.prototype.search (регулярное выражение)
//      Найдите совпадение между регулярным выражением regexp и вызывающей строкой.
// String.prototype.slice (beginIndex [, endIndex])
//      Извлекает часть строки и возвращает новую строку.
// String.prototype.split ([sep [, limit]])
//      Возвращает массив строк, заполненный путем разделения вызывающей
//      строки на вхождения подстроки sep.
// String.prototype.startsWith (searchString [, длина])
//      Определяет, начинается ли вызывающая строка с символов строки searchString.
// String.prototype.substring (indexStart [, indexEnd])
//      Возвращает новую строку, содержащую символы вызывающей строки
//      из (или между) указанного индекса (или индексов).
// String.prototype.toLocaleLowerCase ([языковой стандарт, ... языковые стандарты])
//      Символы в строке преобразуются в нижний регистр с учетом текущего языкового стандарта.
//      Для большинства языков будет возвращено то же значение, что и toLowerCase ().
// String.prototype.toLocaleUpperCase ([языковой стандарт, ... языковые стандарты])
//      Символы в строке преобразуются в верхний регистр с учетом текущего языкового стандарта.
//      Для большинства языков будет возвращено то же значение, что и toUpperCase ().
// String.prototype.toLowerCase ()
//      Возвращает значение вызывающей строки, преобразованное в нижний регистр.
// String.prototype.toString ()
//      Возвращает строку, представляющую указанный объект.
//      Переопределяет метод Object.prototype.toString ().
// String.prototype.toUpperCase ()
//      Возвращает значение вызывающей строки, преобразованное в верхний регистр.
// String.prototype.trim ()
//      Обрезает пробелы в начале и в конце строки. Часть стандарта ECMAScript 5.
// String.prototype.trimStart ()
//      Обрезает пробелы в начале строки.
// String.prototype.trimEnd ()
//      Обрезает пробелы в конце строки.
// String.prototype.valueOf ()
//      Возвращает примитивное значение указанного объекта.
//      Переопределяет метод Object.prototype.valueOf ().
// String.prototype. @@ итератор ()
//      Возвращает новый объект итератора, который выполняет итерацию
//      по кодовым точкам значения String, возвращая каждую кодовую точку как значение String.
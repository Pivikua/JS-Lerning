// Деструктуризация объекта

// Деструктурирующее присваивание также работает с объектами.

// let {var1, var2} = {var1:…, var2:…}

// У нас есть существующий объект с правой стороны, который мы хотим разделить на переменные.
// Левая сторона содержит «шаблон» для соответствующих свойств.
// В простом случае это список названий переменных в {...}.

let options = {
    title: "Menu",
    width: 100,
    height: 200
};

let {title, width, height} = options;

alert(title);  // Menu
alert(width);  // 100
alert(height); // 200

// Свойства options.title, options.width и options.height присваиваются соответствующим переменным.
// Порядок не имеет значения. Вот так – тоже работает:

// изменён порядок в let {...}
let {height, width, title} = {title: "Menu", height: 200, width: 100}

// Шаблон с левой стороны может быть более сложным и определять соответствие между свойствами и переменными.
// Если мы хотим присвоить свойство объекта переменной с другим названием, например, свойство options.width
// присвоить переменной w, то мы можем использовать двоеточие:

let options = {
    title: "Menu",
    width: 100,
    height: 200
};

// { sourceProperty: targetVariable }
let {width: w, height: h, title} = options;

// width -> w
// height -> h
// title -> title

alert(title);  // Menu
alert(w);      // 100
alert(h);      // 200

// Двоеточие показывает «что : куда идёт». В примере выше свойство width сохраняется в переменную w,
// свойство height сохраняется в h, а title присваивается одноимённой переменной.

// Для потенциально отсутствующих свойств мы можем установить значения по умолчанию, используя "=", как здесь:

let options = {
    title: "Menu"
};

let {width = 100, height = 200, title} = options;

alert(title);  // Menu
alert(width);  // 100
alert(height); // 200

// Как и в случае с массивами, значениями по умолчанию могут быть любые выражения или даже функции.
// Они выполнятся, если значения отсутствуют.
// В коде ниже prompt запросит width, но не title:

let options = {
    title: "Menu"
};

let {width = prompt("width?"), title = prompt("title?")} = options;

alert(title);  // Menu
alert(width);  // (результат prompt)

// Мы также можем совмещать : и =:

let options = {
    title: "Menu"
};

let {width: w = 100, height: h = 200, title} = options;

alert(title);  // Menu
alert(w);      // 100
alert(h);      // 200

// Если у нас есть большой объект с множеством свойств, можно взять только то, что нужно:

let options = {
    title: "Menu",
    width: 100,
    height: 200
};

// взять только title, игнорировать остальное
let {title} = options;

alert(title); // Menu

// Остаток объекта «…»

// Что если в объекте больше свойств, чем у нас переменных? Можем ли мы взять необходимые нам,
// а остальные присвоить куда-нибудь?

// Можно использовать троеточие, как и для массивов. В некоторых старых браузерах (IE)
// это не поддерживается, используйте Babel для полифила.

let options = {
  title: "Menu",
  height: 200,
  width: 100
};

// title = свойство с именем title
// rest = объект с остальными свойствами
let {title, ...rest} = options;

// сейчас title="Menu", rest={height: 200, width: 100}
alert(rest.height);  // 200
alert(rest.width);   // 100

// Обратите внимание на let

// В примерах выше переменные были объявлены в присваивании: let {…} = {…}.
// Конечно, мы могли бы использовать существующие переменные и не указывать let, но тут есть подвох.
// Вот так не будет работать:

let title, width, height;
// ошибка будет в этой строке
// {title, width, height} = {title: "Menu", width: 200, height: 100};

// Проблема в том, что JavaScript обрабатывает {...} в основном потоке кода (не внутри другого выражения)
// как блок кода. Такие блоки кода могут быть использованы для группировки операторов, например:

{
  // блок кода
  let message = "Hello";
  // ...
  alert( message );
}

// Так что здесь JavaScript считает, что видит блок кода, отсюда и ошибка.
// На самом-то деле у нас деструктуризация.
// Чтобы показать JavaScript, что это не блок кода, мы можем заключить выражение в скобки (...):

let title, width, height;
// сейчас всё работает
({title, width, height} = {title: "Menu", width: 200, height: 100});
alert( title ); // Menu
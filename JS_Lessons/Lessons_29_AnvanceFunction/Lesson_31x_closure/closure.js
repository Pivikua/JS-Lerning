// А здесь мы просто создаём и возвращаем функцию «счётчик»:

function makeCounter() {
  let count = 0;

  return function() {
          return count++; // есть доступ к внешней переменной "count"
  };
}

let counter = makeCounter();

alert( counter() ); // 0
alert( counter() ); // 1

// Давайте продолжим с примером makeCounter. Он создаёт функцию «counter», которая возвращает
// следующее число при каждом вызове. Несмотря на простоту, немного модифицированные варианты
// этого кода применяются на практике, например, в генераторе псевдослучайных чисел и во многих
// других случаях.

(function() {

    let message = "Hello";

    alert(message); // Hello

})();

// Так что, скобки вокруг функции – это трюк, который позволяет показать JavaScript,
// что функция была создана в контексте другого выражения, и, таким образом, э
// то функциональное выражение: ей не нужно имя и её можно вызвать немедленно.
//
// Кроме скобок, существуют и другие пути показать JavaScript, что мы имеем в виду Function Expression:

// Пути создания IIFE

(function() {
  alert("Скобки вокруг функции");
})();

(function() {
  alert("Скобки вокруг всего");
}());

!function() {
  alert("Выражение начинается с логического оператора NOT");
}();

+function() {
  alert("Выражение начинается с унарного плюса");
}();

// Во всех перечисленных случаях мы объявляем Function Expression и немедленно выполняем его.
// Ещё раз заметим, что в настоящий момент нет необходимости писать подобный код.